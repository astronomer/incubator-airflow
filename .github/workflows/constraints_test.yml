# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
---
name: Constraints Build
on:
  schedule:
    - cron: '28 0 * * *'
  push:
    branches: ['master', 'v1-10-test', 'v1-10-stable','er-constraints-impl']
  pull_request:
    branches: ['master', 'v1-10-test', 'v1-10-stable','er-constraints-impl']

env:

  MOUNT_LOCAL_SOURCES: "false"
  MOUNT_FILES: "true"
  FORCE_ANSWER_TO_QUESTIONS: "yes"
  FORCE_PULL_IMAGES: "true"
  CHECK_IMAGE_FOR_REBUILD: "true"
  SKIP_CHECK_REMOTE_IMAGE: "true"
  DB_RESET: "true"
  VERBOSE: "true"
  UPGRADE_TO_LATEST_CONSTRAINTS: ${{ github.event_name == 'push' || github.event_name == 'scheduled' }}
  DOCKER_CACHE: "pulled"
  PYTHON_MAJOR_MINOR_VERSION: 3.6
  USE_GITHUB_REGISTRY: "true"
  GITHUB_REPOSITORY: ${{ github.repository }}
  GITHUB_USERNAME: ${{ github.actor }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GITHUB_REGISTRY_PULL_IMAGE_TAG: "${{ github.run_id }}"
  GITHUB_REGISTRY_PUSH_IMAGE_TAG: "latest"

  # You can switch between building the image in "Build Images" workflow or building them in CI workflow
  # Separately for each job.
  #
  # a) Using images build in the separate "Build Image" workflow:
  #
  #  GITHUB_REGISTRY_WAIT_FOR_IMAGE: "true"
  #
  # b) Building images in CI workflow - separately for each job:
  #
  #  GITHUB_REGISTRY_WAIT_FOR_IMAGE: "false"
  #
  # You can also switch back to building images locally and disabling the "Build Images" workflow
  # by defining AIRFLOW_GITHUB_REGISTRY_WAIT_FOR_IMAGE secret with value set to "false"

  GITHUB_REGISTRY_WAIT_FOR_IMAGE: ${{ secrets.AIRFLOW_GITHUB_REGISTRY_WAIT_FOR_IMAGE != 'false' }}

jobs:

  
  static-checks:
    timeout-minutes: 30
    name: "Static checks: no pylint"
    runs-on: ubuntu-latest
    needs: [ci-images]
    env:
      SKIP: "pylint"
      MOUNT_LOCAL_SOURCES: "true"
    if: github.repository == 'apache/airflow' || github.event_name != 'schedule'
      # We want to make sure we have latest sources as only in_container scripts are added
    # to the image but we want to static-check all of them
    steps:
      - name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
        uses: actions/checkout@v2
      - name: "Setup python"
        uses: actions/setup-python@v2
        with:
          python-version: 3.6
      - name: Cache pre-commit env
        uses: actions/cache@v2
        env:
          cache-name: cache-pre-commit-master-no-pylint-v1
        with:
          path: ~/.cache/pre-commit
          key: ${{ env.cache-name }}-${{ github.job }}-${{ hashFiles('.pre-commit-config.yaml') }}
      - name: "Free space"
        run: ./scripts/ci/tools/ci_free_space_on_ci.sh
      - name: "Prepare CI image ${{env.PYTHON_MAJOR_MINOR_VERSION}}:${{ env.GITHUB_REGISTRY_PULL_IMAGE_TAG }}"
        run: ./scripts/ci/images/ci_prepare_ci_image_on_ci.sh
      - name: "Static checks: no pylint"
        run: ./scripts/ci/static_checks/run_static_checks.sh
        env:
          VERBOSE: false

  static-checks-pylint:
    timeout-minutes: 30
    name: "Static checks: pylint"
    runs-on: ubuntu-latest
    needs: [ci-images]
    if: github.repository == 'apache/airflow' || github.event_name != 'schedule'
    env:
      # We want to make sure we have latest sources as only in_container scripts are added
      # to the image but we want to static-check all of them
      MOUNT_LOCAL_SOURCES: "true"
    steps:
      - name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
        uses: actions/checkout@v2
      - name: "Setup python"
        uses: actions/setup-python@v2
        with:
          python-version: 3.6
      - name: "Cache pre-commit env"
        uses: actions/cache@v2
        env:
          cache-name: cache-pre-commit-master-pylint-v1
        with:
          path: ~/.cache/pre-commit
          key: ${{ env.cache-name }}-${{ github.job }}-${{ hashFiles('.pre-commit-config.yaml') }}
      - name: "Free space"
        run: ./scripts/ci/tools/ci_free_space_on_ci.sh
      - name: "Prepare CI image ${{env.PYTHON_MAJOR_MINOR_VERSION}}:${{ env.GITHUB_REGISTRY_PULL_IMAGE_TAG }}"
        run: ./scripts/ci/images/ci_prepare_ci_image_on_ci.sh
      - name: "Static checks: pylint"
        run: ./scripts/ci/static_checks/run_static_checks.sh pylint
        env:
          VERBOSE: false

  constraints:
    timeout-minutes: 10
    name: "Constraints"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8]
      fail-fast: false
    needs:
      #- static-checks
      #- static-checks-pylint
      #- tests-sqlite
      #- tests-mysql
      #- tests-postgres
      #- tests-kubernetes
    env:
      PYTHON_MAJOR_MINOR_VERSION: ${{ matrix.python-version }}
    if: >
        github.ref == 'refs/heads/er-constraints-impl' 
      
    steps:
      - name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
        uses: actions/checkout@v2
      - name: "Setup python"
        uses: actions/setup-python@v2
        with:
          python-version: 3.6
      - name: "Free space"
        run: ./scripts/ci/tools/ci_free_space_on_ci.sh
      - name: "Prepare CI image ${{env.PYTHON_MAJOR_MINOR_VERSION}}:${{ github.sha }}"
        run: ./scripts/ci/images/ci_prepare_ci_image_on_ci.sh
      - name: "Generate constraints"
        run: ./scripts/ci/constraints/ci_generate_constraints.sh
      - name: "Upload constraint artifacts"
        uses: actions/upload-artifact@v2
        with:
          name: 'constraints-${{matrix.python-version}}'
          path: './files/constraints-${{matrix.python-version}}/constraints-${{matrix.python-version}}.txt'

  constraints-push:
    timeout-minutes: 10
    name: "Constraints push"
    runs-on: ubuntu-latest
    needs: [constraints]
    if: >
        github.ref == 'refs/heads/er-constraints-impl' 
    steps:
      - name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
        uses: actions/checkout@v2
      - name: "Set constraints branch name"
        id: constraints-branch
        run: ./scripts/ci/constraints/ci_branch_constraints.sh
      - name: Checkout ${{ steps.constraints-branch.outputs.branch }}
        uses: actions/checkout@v2
        with:
          path: "repo"
          ref: ${{ steps.constraints-branch.outputs.branch }}
      - name: "Get all artifacts (constraints)"
        uses: actions/download-artifact@v2
        with:
          path: 'artifacts'
      - name: "Commit changed constraint files"
        run: ./scripts/ci/constraints/ci_commit_constraints.sh
      - name: "Push changes"
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ steps.constraints-branch.outputs.branch }}
          directory: "repo"
 
